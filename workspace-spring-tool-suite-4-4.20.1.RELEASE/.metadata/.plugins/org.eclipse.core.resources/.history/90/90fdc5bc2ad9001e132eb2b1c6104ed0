package com.example.estate.service;

import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.example.estate.entity.Product;
import com.example.estate.repository.ProductRepository;

@Service
public class ProductService {

	@Value("${upload.path}")
    private String uploadPath;
	
	@Autowired
	private ProductRepository productRepository;

	@Transactional
	public void saveProduct(MultipartFile productImage, String productName, String infomation, int productPrice) {
		try {
			Product product = new Product();
			product.setProductName(productName);
			product.setInfomation(infomation);
			product.setProductPrice(productPrice);

			// 이미지 파일 이름을 랜덤으로 생성
			String imageFileName = UUID.randomUUID().toString() + "_" + productImage.getOriginalFilename();

			// 이미지를 파일 시스템에 저장
			Path imagePath = Paths.get(uploadPath, imageFileName);
			productImage.transferTo(imagePath.toFile());

			// Product 엔터티에 이미지 파일 이름 저장
			product.setProductImage(imageFileName);

			// 나머지 로직은 그대로 유지
			productRepository.save(product);
		} catch (IOException e) {
			// 예외 처리
			e.printStackTrace();
			throw new RuntimeException("Failed to save product with image");
		}
	}

	public Product getProductByCode(int productCode) {
        return productRepository.findByProductCode(productCode);
    }
	
	@Transactional(readOnly = true)
	public List<Product> getAllProducts() {
		return productRepository.findAll();
	}

}
